<?xml version="1.0" encoding="utf-8"?>
<page xmlns="http://projectmallard.org/1.0/"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      type="guide" id="index">

  <title>Building Vala applications</title>

  <p><em>This document is an adaptation for Vala of chapter 1
  section 5 of the <link
  href="http://developer.gnome.org/gtk3/">GTK+ 3 library
  documentation</link>. All errors and omissions should be blamed to
  the adapting author.</em></p>

  <p>An application consists of a number of files:</p>

  <terms>

    <item>
      <title><em>The binary</em></title>
      <p>This gets installed in <code>/usr/bin</code>.</p>
    </item>

    <item>
      <title><em>A desktop file</em></title>
      <p>The desktop file provides important information about
      the application to the desktop shell, such as its name,
      icon, D-Bus name, commandline to launch it, etc. It is
      installed in <code>/usr/share/applications</code>.</p>
    </item>

    <item>
      <title><em>An icon</em></title>
      <p>The icon gets installed in
      <code>/usr/share/icons/hicolor/48x48/apps</code>, where it
      will be found regardless of the current theme.</p>
    </item>

    <item>
      <title><em>A settings schema</em></title>
      <p>If the application uses GSettings, it will install its
      schema in <code>/usr/share/glib-2.0/schemas</code>, so
      that tools like dconf-editor can find it.</p>
    </item>

    <item>
      <title><em>Other resources</em></title>
      <p>Other files, such as GtkBuilder ui files, are best
      loaded from resources stored in the application binary
      itself. This eliminates the need for most of the files
      that would traditionally be installed in an
      application-specific location in
      <code>/usr/share</code>.</p>
    </item>

  </terms>

  <p>GTK+ includes application support that is built on top of
  #GApplication. In this tutorial we'll build a simple application
  by starting from scratch, adding more and more pieces over
  time. Along the way, we'll learn about #GtkApplication, templates,
  resources, application menus, settings, #GtkHeaderBar, #GtkStack,
  #GtkSearchBar, #GtkListBox, and more.</p>

  <p>The full, buildable sources for this example can be found <link
  href="https://github.com/canek-pelaez/vala-example/">online</link>.</p>

  <section>

    <title>A trivial application</title>

    <p>When using #GtkApplication, the <code>main()</code> function
    can be very simple. We just create an instance of our
    application class, and call the <code>run()</code> method with
    the commandline arguments as parameter.</p>

    <listing>
      <title><file>main.vala</file></title>
      <code mime="text/x-csharp"><xi:include href="../src/main.vala"
      parse="text"><xi:fallback><![CDATA[
namespace Example {

    public static int main (string[] args) {
        var application = new Application ();
        return application.run (args);
    }
}
]]></xi:fallback></xi:include></code>
    </listing>

    <p>All the application logic is in the application class, which
    is a subclass of #GtkApplication. Our example does not yet have
    any interesting functionality. All it does is open a window when
    it is activated without arguments, and open the files it is
    given, if it is started with arguments.</p>

    <p>To handle these two cases, we override the
    <code>activate()</code> method, which gets called when the
    application is launched without commandline arguments, and the
    <code>open()</code> method, which gets called when the
    application is launched with commandline arguments.</p>

    <p>To learn more about #GApplication entry points, consult the
    GIO <link
    href="http://www.valadoc.org/#!api=gio-2.0/GLib.Application">documentation</link>.</p>

    <listing>
      <title><file>application.vala</file></title>
      <code mime="text/x-csharp"><xi:include
      href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage1/src/application.vala"
      parse="text"><xi:fallback><![CDATA[
namespace Example {

    public class Application : Gtk.Application {

        private ApplicationWindow window;

        public Application () {
            application_id = "org.gtk.exampleapp";
            flags |= GLib.ApplicationFlags.HANDLES_OPEN;
        }

        public override void activate () {
            window = new ApplicationWindow (this);
            window.present ();
        }

        public override void open (GLib.File[] files,
                                   string      hint) {
            if (window == null)
                window = new ApplicationWindow (this);

            foreach (var file in files)
                window.open (file);

            window.present ();
        }
    }
}]]></xi:fallback></xi:include></code>
    </listing>

    <p>Another important class that is part of the application
    support in GTK+ is #GtkApplicationWindow. It is typically
    subclassed as well. Our subclass does not do anything yet, so we
    will just get an empty window.</p>

    <listing>
      <title><file>application-window.vala</file></title>
      <code mime="text/x-csharp"><xi:include
      href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage1/src/application-window.vala"
      parse="text"><xi:fallback><![CDATA[
namespace Example {

    public class ApplicationWindow : Gtk.ApplicationWindow {

        public ApplicationWindow (Gtk.Application application) {
            GLib.Object (application: application);
        }

        public void open (GLib.File file) {
        }
    }
}]]></xi:fallback></xi:include></code>
    </listing>

    <p>As part of the initial setup of our application, we also
    create an icon and a desktop file.</p>

    <listing>
      <title><file>exampleapp.png</file></title>
      <media type="image" mime="image/png"
             src="../data/exampleapp.png">Application icon</media>
    </listing>

    <listing>
      <title><file>exampleapp.desktop.in</file></title>
      <code mime="application/x-desktop"><xi:include
      href="../data/exampleapp.desktop.in"
      parse="text"><xi:fallback><![CDATA[
[Desktop Entry]
Type=Application
Name=Example
Icon=exampleapp
StartupNotify=true
Exec=@bindir@/exampleapp
]]></xi:fallback></xi:include></code>
    </listing>

    <p>Note that <code>@bindir@</code> needs to be replaced with the
    actual path to the binary before this desktop file can be
    used.</p>

    <p>Here is what we've achieved so far:</p>

    <p><media type="image" mime="image/png"
              src="images/exampleapp1.png">Application</media></p>

    <p>This does not look very impressive yet, but our application
    is already presenting itself on the session bus, it has
    single-instance semantics, and it accepts files as commandline
    arguments.</p>

  </section>

  <section>

    <title>Populating the window</title>

    <p>In this step, we use a #GtkBuilder template to associate a
    #GtkBuilder ui file with our application window class.</p>
    
    <p>Our simple ui file puts a #GtkHeaderBar on top of a #GtkStack
    widget. The header bar contains a #GtkStackSwitcher, which is a
    standalone widget to show a row of 'tabs' for the pages of a
    #GtkStack.</p>

    <listing>
      <title><file>window.ui</file></title>
      <code mime="application/xml"><xi:include
      href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage2/data/window.ui"
      parse="text"><xi:fallback><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<interface>
  <requires lib="gtk+" version="3.12"/>
  <template class="ExampleApplicationWindow" parent="GtkApplicationWindow">
    <property name="title" translatable="yes">Example Application</property>
    <property name="default-width">600</property>
    <property name="default-height">400</property>
    <child>
      <object class="GtkBox" id="content_box">
        <property name="visible">True</property>
        <property name="orientation">vertical</property>
        <child>
          <object class="GtkHeaderBar" id="header">
            <property name="visible">True</property>
            <child type="title">
              <object class="GtkStackSwitcher" id="tabs">
                <property name="visible">True</property>
                <property name="margin">6</property>
                <property name="stack">stack</property>
              </object>
            </child>
          </object>
        </child>
        <child>
          <object class="GtkStack" id="stack">
            <property name="visible">True</property>
          </object>
        </child>
      </object>
    </child>
  </template>
</interface>]]></xi:fallback></xi:include></code>
    </listing>

    <p>To make use of this file in our application, we revisit our
    #GtkApplicationWindow subclass, and set the
    <code>[GtkTemplate]</code> attribute to it so the Vala compiler
    can bind our class to the specified ui resource as template for
    it. Notice that the class name used in the ui file,
    <code>ExampleApplicationWindow</code>, is the result of
    combining the namespace <code>Example</code> with the name of
    our class, <code>ApplicationWindow</code>. The Vala compiler
    does this for us when compiling from Vala to C code.</p>

    <listing>
      <title><file>application-window.vala</file></title>
      <code mime="text/x-csharp"><xi:include
      href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage2/src/application-window.vala"
      parse="text"><xi:fallback><![CDATA[
namespace Example {

    [GtkTemplate (ui = "/org/gtk/exampleapp/window.ui")]
    public class ApplicationWindow : Gtk.ApplicationWindow {

        public ApplicationWindow (Gtk.Application application) {
            GLib.Object (application: application);
        }

        public void open (GLib.File file) {
        }
    }
}]]></xi:fallback></xi:include></code>
    </listing>

    <p>Now we need to use GLib's resource functionality to include
    the ui file in the binary. This is commonly done by listing all
    resources in a <code>.gresource.xml</code> file, such as
    this:</p>

    <listing>
      <title><file>exampleapp.gresource.xml</file></title>
      <code mime="application/xml"><xi:include
      href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage2/data/exampleapp.gresource.xml"
      parse="text"><xi:fallback><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<gresources>
  <gresource prefix="/org/gtk/exampleapp">
    <file preprocess="xml-stripblanks">window.ui</file>
  </gresource>
</gresources>]]></xi:fallback></xi:include></code>
    </listing>

    <p>This file has to be converted into a C source file that will
    be compiled and linked into the application together with the
    other source files. To do so, we use the
    <code>glib-compile-resources</code> utility:</p>

    <screen>glib-compile-resources exampleapp.gresource.xml --target=resources.c --generate-source</screen>

    <p>Our application now looks like this:</p>

    <p><media type="image" mime="image/png"
              src="images/exampleapp2.png">Application</media></p>

  </section>

  <section>
    <title>Opening files</title>

    <p>In this step, we make our application show the content of all
    the files that it is given on the commandline.</p>

    <p>To this end, we add a private member <code>stack</code> to
    our application window subclass associated with the #GtkStack
    defined in the ui file. To do this, we simply use the
    <code>[GtkChild]</code> attribute in the class member
    declaration so the Vala compiler can bind it.</p>

    <listing>
      <title><file>application-window.vala</file> (extract)</title>
      <code mime="text/x-csharp"><![CDATA[
    ...
    [GtkTemplate (ui = "/org/gtk/exampleapp/window.ui")]
    public class ApplicationWindow : Gtk.ApplicationWindow {

        [GtkChild]
        private Gtk.Stack stack;

        public ApplicationWindow (Gtk.Application application) {
            GLib.Object (application: application);
        }
    ...
}]]></code>
    </listing>

    <p>Now we revisit the <code>open()</code> method that is called
    for each commandline argument, and construct a #GtkTextView that
    we then add as a page to the stack:</p>

    <listing>
      <title><file>application-window.vala</file> (extract)</title>
      <code mime="text/x-csharp"><![CDATA[
        ...
        public void open (GLib.File file) {
            var basename = file.get_basename ();

            var scrolled = new Gtk.ScrolledWindow (null, null);
            scrolled.show ();
            scrolled.hexpand = true;
            scrolled.vexpand = true;

            var view = new Gtk.TextView ();
            view.editable = false;
            view.cursor_visible = false;
            view.show ();

            scrolled.add (view);
            stack.add_titled (scrolled, basename, basename);

            try {
                uint8[] contents;
                if (file.load_contents (null, out contents, null)) {
                    var buffer = view.get_buffer ();
                    buffer.set_text ((string)contents);
                }
            } catch (GLib.Error e) {
                GLib.warning ("There was an error loading '%s': %s",
                              basename, e.message);
            }
        }
        ...]]></code>
    </listing>

    <p>(<link href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage3/src/application-window.vala">full source</link>)</p>

    <p>Note that we did not have to touch the stack switcher at
    all. It gets all its information from the stack that it belongs
    to. Here, we are passing the label to show for each file as the
    last argument to the <code>add_titled()</code> method.</p>

    <p>Our application is beginning to take shape:</p>

    <p><media type="image" mime="image/png"
              src="images/exampleapp3.png">Application</media></p>

  </section>

  <section>

    <title>An application menu</title>

    <p>An application menu is shown by GNOME shell at the top of the
    screen. It is meant to collect infrequently used actions that
    affect the whole application.</p>

    <p>Just like the window template, we specify our application menu
    in a ui file, and add it as a resource to our binary.</p>

    <listing>
      <title><file>app-menu.ui</file></title>
      <code mime="application/xml"><xi:include
      href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage4/data/app-menu.ui"
      parse="text"><xi:fallback><![CDATA[
<?xml version="1.0"?>
<interface>
  <requires lib="gtk+" version="3.12"/>
  <menu id="appmenu">
    <section>
      <item>
        <attribute name="label" translatable="yes">_Preferences</attribute>
        <attribute name="action">app.preferences</attribute>
      </item>
    </section>
    <section>
      <item>
        <attribute name="label" translatable="yes">_Quit</attribute>
        <attribute name="action">app.quit</attribute>
      </item>
    </section>
  </menu>
</interface>]]></xi:fallback></xi:include></code>
    </listing>

    <p>To associate the app menu with the application, we have to
    call its method <code>set_app_menu()</code>. Since app menus
    work by activating #GAction<!-- -->s, we also have to add a
    suitable set of actions to our application.</p>

    <p>Both of these tasks are best done by overriding the
    <code>startup()</code> method, which is guaranteed to be called
    once for each primary application instance:</p>

    <listing>
      <title><file>application.vala</file> (extract)</title>
      <code mime="text/x-csharp"><![CDATA[
        ...
        private void preferences () {
        }

        public override void startup () {
            base.startup ();

            var action = new GLib.SimpleAction ("preferences", null);
            action.activate.connect (preferences);
            add_action (action);

            action = new GLib.SimpleAction ("quit", null);
            action.activate.connect (quit);
            add_action (action);
            add_accelerator ("<Ctrl>Q", "app.quit", null);

            var builder = new Gtk.Builder.from_resource ("/org/gtk/exampleapp/app-menu.ui");
            var app_menu = builder.get_object ("appmenu") as GLib.MenuModel;

            set_app_menu (app_menu);
        }
        ...]]></code>
    </listing>
    <p>(<link href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage4/src/application.vala">full source</link>)</p>

    <p>Our preferences menu item does not do anything yet, but the
    Quit menu item is fully functional (the <code>quit()</code>
    method is already provided by #GtkApplication). Note that it can
    also be activated by the usual Ctrl-Q shortcut. The shortcut was
    added with the <code>add_accelerator()</code> method.</p>

    <p>The application menu looks like this:</p>

    <p><media type="image" mime="image/png"
              src="images/exampleapp4.png">Application</media></p>

    </section>

    <section>

      <title>A preference dialog</title>

      <p>A typical application will have a some preferences that
      should be remembered from one run to the next. Even for our
      simple example application, we may want to change the font
      that is used for the content.</p>

      <p>We are going to use #GSettings to store our preferences.
      #GSettings requires a schema that describes our settings:</p>

      <listing>
        <title><file>org.gtk.exampleapp.gschema.xml</file></title>
        <code mime="application/xml"><xi:include
        href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage5/data/org.gtk.exampleapp.gschema.xml"
        parse="text"><xi:fallback><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schemalist>
  <schema path="/org/gtk/exampleapp/" id="org.gtk.exampleapp">
    <key name="font" type="s">
      <default>'Monospace 12'</default>
      <summary>Font</summary>
      <description>The font to be used for content.</description>
    </key>
    <key name="transition" type="s">
      <choices>
        <choice value="none"/>
        <choice value="crossfade"/>
        <choice value="slide-left-right"/>
      </choices>
      <default>'none'</default>
      <summary>Transition</summary>
      <description>The transition to use when switching tabs.</description>
    </key>
  </schema>
</schemalist>]]></xi:fallback></xi:include></code>
      </listing>

      <p>Before we can make use of this schema in our application,
      we need to compile it into the binary form that #GSettings
      expects. GIO provides <link
      href="https://developer.gnome.org/gio/2.36/ch31s06.html">macros</link>
      to do this in autotools-based projects, and the source code
      where this documentation resides uses them.</p>

      <p>Next, we need to connect our settings to the widgets that
      they are supposed to control. One convenient way to do this is
      to use #GSettings bind functionality to bind settings keys to
      object properties, as we do here for the transition
      setting.</p>

      <listing>
        <title><file>application-window.vala</file> (extract)</title>
        <code mime="text/x-csharp"><![CDATA[
        ...
        private GLib.Settings settings;
        ...
        public ApplicationWindow (Gtk.Application application) {
            GLib.Object (application: application);

            settings = new GLib.Settings ("org.gtk.exampleapp");

            settings.bind ("transition", stack, "transition-type",
                           GLib.SettingsBindFlags.DEFAULT);
        }
        ...]]></code>
      </listing>
      <p>(<link href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage5/src/application-window.vala">full source</link>)</p>

      <p>The code to connect the font setting is a little more
      involved, since there is no simple object property that it
      corresponds to, so we are not going to go into that here.</p>

      <p>At this point, the application will already react if you
      change one of the settings, e.g. using the
      <code>gsettings</code> commandline tool. Of course, we expect
      the application to provide a preference dialog for these. So
      lets do that now. Our preference dialog will be a subclass of
      #GtkDialog, and we'll use the same techniques that we've
      already seen: templates, private structs, settings
      bindings.</p>

      <p>Lets start with the template.</p>

      <listing>
        <title><file>prefs.ui</file></title>
        <code mime="application/xml"><xi:include
        href="../data/prefs.ui" parse="text"><xi:fallback><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<interface>
  <requires lib="gtk+" version="3.12"/>
  <template class="ExampleApplicationPreferences" parent="GtkDialog">
    <property name="title" translatable="yes">Preferences</property>
    <property name="resizable">False</property>
    <property name="modal">True</property>
    <child internal-child="vbox">
      <object class="GtkBox" id="vbox">
        <child>
          <object class="GtkGrid" id="grid">
            <property name="visible">True</property>
            <property name="margin">6</property>
            <property name="row-spacing">12</property>
            <property name="column-spacing">6</property>
            <child>
              <object class="GtkLabel" id="fontlabel">
                <property name="visible">True</property>
                <property name="label">_Font:</property>
                <property name="use-underline">True</property>
                <property name="mnemonic-widget">font</property>
                <property name="xalign">1</property>
              </object>
              <packing>
                <property name="left-attach">0</property>
                <property name="top-attach">0</property>
              </packing>
            </child>
            <child>
              <object class="GtkFontButton" id="font">
                <property name="visible">True</property>
              </object>
              <packing>
                <property name="left-attach">1</property>
                <property name="top-attach">0</property>
              </packing>
            </child>
            <child>
              <object class="GtkLabel" id="transitionlabel">
                <property name="visible">True</property>
                <property name="label">_Transition:</property>
                <property name="use-underline">True</property>
                <property name="mnemonic-widget">transition</property>
                <property name="xalign">1</property>
              </object>
              <packing>
                <property name="left-attach">0</property>
                <property name="top-attach">1</property>
              </packing>
            </child>
            <child>
              <object class="GtkComboBoxText" id="transition">
                <property name="visible">True</property>
                <items>
                  <item translatable="yes" id="none">None</item>
                  <item translatable="yes" id="crossfade">Fade</item>
                  <item translatable="yes" id="slide-left-right">Slide</item>
                </items>
              </object>
              <packing>
                <property name="left-attach">1</property>
                <property name="top-attach">1</property>
              </packing>
            </child>
          </object>
        </child>
      </object>
    </child>
  </template>
</interface>]]></xi:fallback></xi:include></code>
      </listing>

      <p>Next comes the dialog subclass.</p>

      <listing>
        <title><file>application-preferences.vala</file></title>
        <code mime="text/x-csharp"><xi:include
        href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage5/src/application-preferences.vala"
        parse="text"><xi:fallback><![CDATA[
namespace Example {

    [GtkTemplate (ui = "/org/gtk/exampleapp/prefs.ui")]
    public class ApplicationPreferences : Gtk.Dialog {

        private GLib.Settings settings;

        [GtkChild]
        private Gtk.FontButton font;

        [GtkChild]
        private Gtk.ComboBoxText transition;

        public ApplicationPreferences (ApplicationWindow window) {
            GLib.Object (transient_for: window,
                         use_header_bar: 1);

            settings = new GLib.Settings ("org.gtk.exampleapp");
            settings.bind ("font", font, "font",
                           GLib.SettingsBindFlags.DEFAULT);
            settings.bind ("transition", transition, "active-id",
                           GLib.SettingsBindFlags.DEFAULT);
        }
    }
}]]></xi:fallback></xi:include></code>
      </listing>

      <p>Now we revisit the <code>activated()</code> method in our
      application class, and make it open a new preference
      dialog.</p>

      <listing>
        <title><file>application.vala</file> (extract)</title>
        <code mime="text/x-csharp"><![CDATA[
        ...
        private void preferences () {
            var prefs = new ApplicationPreferences (window);
            prefs.present ();
        }
        ...]]></code>
      </listing>
      <p>(<link href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage5/src/application.vala">full source</link>)</p>

      <p>After all this work, our application can now show a
      preference dialog like this:</p>

      <p><media type="image" mime="image/png"
                src="images/exampleapp5.png">Application</media></p>

    </section>

    <section>

      <title>Adding a search bar</title>

      <p>We continue to flesh out the functionality of our
      application.  For now, we add search. GTK+ supports this with
      #GtkSearchEntry and #GtkSearchBar. The search bar is a widget
      that can slide in from the top to present a search entry.</p>

      <p>We add a toggle button to the header bar, which can be used
      to slide out the search bar below the header bar.</p>

      <listing>
        <title><file>window.ui</file></title>
        <code mime="application/xml"><xi:include
        href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage6/data/window.ui"
        parse="text"><xi:fallback><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<interface>
  <requires lib="gtk+" version="3.12"/>
  <template class="ExampleApplicationWindow" parent="GtkApplicationWindow">
    <property name="title" translatable="yes">Example Application</property>
    <property name="default-width">600</property>
    <property name="default-height">400</property>
    <child>
      <object class="GtkBox" id="content_box">
        <property name="visible">True</property>
        <property name="orientation">vertical</property>
        <child>
          <object class="GtkHeaderBar" id="header">
            <property name="visible">True</property>
            <child type="title">
              <object class="GtkStackSwitcher" id="tabs">
                <property name="visible">True</property>
                <property name="margin">6</property>
                <property name="stack">stack</property>
              </object>
            </child>
            <child>
              <object class="GtkToggleButton" id="search">
                <property name="visible">True</property>
                <property name="sensitive">False</property>
                <style>
                  <class name="image-button"/>
                </style>
                <child>
                  <object class="GtkImage" id="search-icon">
                    <property name="visible">True</property>
                    <property name="icon-name">edit-find-symbolic</property>
                    <property name="icon-size">1</property>
                  </object>
                </child>
              </object>
              <packing>
                <property name="pack-type">end</property>
              </packing>
            </child>
          </object>
        </child>
        <child>
          <object class="GtkSearchBar" id="searchbar">
            <property name="visible">True</property>
            <child>
              <object class="GtkSearchEntry" id="searchentry">
                <signal name="search-changed" handler="search_text_changed"/>
                <property name="visible">True</property>
              </object>
            </child>
          </object>
        </child>
        <child>
          <object class="GtkStack" id="stack">
            <signal name="notify::visible-child" handler="visible_child_changed"/>
            <property name="visible">True</property>
          </object>
        </child>
      </object>
    </child>
  </template>
</interface>]]></xi:fallback></xi:include></code>
      </listing>

      <p>Implementing the search needs quite a few code changes that
      we are not going to completely go over here. The central piece
      of the search implementation is a signal handler that listens
      for text changes in the search entry.</p>

      <listing>
        <title><file>application-window.vala</file> (extract)</title>
        <code mime="text/x-csharp"><![CDATA[
        ...
        [GtkCallback]
        public void search_text_changed () {
            var text = searchentry.get_text ();

            if (text == "")
                return;

            var tab = stack.get_visible_child () as Gtk.Bin;
            var view = tab.get_child () as Gtk.TextView;
            var buffer = view.get_buffer ();

            /* Very simple-minded search implementation */
            Gtk.TextIter start, match_start, match_end;
            buffer.get_start_iter (out start);
            if (start.forward_search (text, Gtk.TextSearchFlags.CASE_INSENSITIVE,
                                      out match_start, out match_end, null)) {
                buffer.select_range (match_start, match_end);
                view.scroll_to_iter (match_start, 0.0, false, 0.0, 0.0);
            }
        }
        ...]]></code>
      </listing>
      <p>(<link href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage6/src/application-window.vala">full source</link>)</p>

      <p>With the search bar, our application now looks like this:</p>

      <p><media type="image" mime="image/png"
                src="images/exampleapp6.png">Application</media></p>

    </section>

    <section>

      <title>Adding a side bar</title>

      <p>As another piece of functionality, we are adding a sidebar,
      which demonstrates #GtkMenuButton, #GtkRevealer and
      #GtkListBox.</p>

      <listing>
        <title><file>window.ui</file></title>
        <code mime="application/xml"><xi:include
        href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage7/data/window.ui"
        parse="text"><xi:fallback><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<interface>
  <requires lib="gtk+" version="3.12"/>
  <template class="ExampleApplicationWindow" parent="GtkApplicationWindow">
    <property name="title" translatable="yes">Example Application</property>
    <property name="default-width">600</property>
    <property name="default-height">400</property>
    <child>
      <object class="GtkBox" id="content_box">
        <property name="visible">True</property>
        <property name="orientation">vertical</property>
        <child>
          <object class="GtkHeaderBar" id="header">
            <property name="visible">True</property>
            <child type="title">
              <object class="GtkStackSwitcher" id="tabs">
                <property name="visible">True</property>
                <property name="margin">6</property>
                <property name="stack">stack</property>
              </object>
            </child>
            <child>
              <object class="GtkToggleButton" id="search">
                <property name="visible">True</property>
                <property name="sensitive">False</property>
                <style>
                  <class name="image-button"/>
                </style>
                <child>
                  <object class="GtkImage" id="search-icon">
                    <property name="visible">True</property>
                    <property name="icon-name">edit-find-symbolic</property>
                    <property name="icon-size">1</property>
                  </object>
                </child>
              </object>
              <packing>
                <property name="pack-type">end</property>
              </packing>
            </child>
            <child>
              <object class="GtkMenuButton" id="gears">
                <property name="visible">True</property>
                <property name="use-popover">True</property>
                <style>
                  <class name="image-button"/>
                </style>
                <child>
                  <object class="GtkImage" id="gears-icon">
                    <property name="visible">True</property>
                    <property name="icon-name">emblem-system-symbolic</property>
                    <property name="icon-size">1</property>
                  </object>
                </child>
              </object>
              <packing>
                <property name="pack-type">end</property>
              </packing>
            </child>
          </object>
        </child>
        <child>
          <object class="GtkSearchBar" id="searchbar">
            <property name="visible">True</property>
            <child>
              <object class="GtkSearchEntry" id="searchentry">
                <signal name="search-changed" handler="search_text_changed"/>
                <property name="visible">True</property>
              </object>
            </child>
          </object>
        </child>
        <child>
          <object class="GtkBox" id="hbox">
            <property name="visible">True</property>
            <child>
              <object class="GtkRevealer" id="sidebar">
                <property name="visible">True</property>
                <property name="transition-type">slide-right</property>
                <child>
                  <object class="GtkScrolledWindow" id="sidebar-sw">
                    <property name="visible">True</property>
                    <property name="hscrollbar-policy">never</property>
                    <property name="vscrollbar-policy">automatic</property>
                    <child>
                      <object class="GtkListBox" id="words">
                        <property name="visible">True</property>
                        <property name="selection-mode">none</property>
                      </object>
                    </child>
                  </object>
                </child>
              </object>
            </child>
            <child>
              <object class="GtkStack" id="stack">
                <signal name="notify::visible-child" handler="visible_child_changed"/>
                <property name="visible">True</property>
              </object>
            </child>
          </object>
        </child>
      </object>
    </child>
  </template>
</interface>]]></xi:fallback></xi:include></code>
      </listing>

      <p>The code to populate the sidebar with buttons for the words
      found in each file is a little too involved to go into
      here. But we'll look at the code to add the gears menu.</p>

      <p>As expected by now, the gears menu is specified in a
      GtkBuilder ui file.</p>

      <listing>
        <title><file>gears-menu.ui</file></title>
        <code mime="application/xml"><xi:include
        href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage7/data/gears-menu.ui"
        parse="text"><xi:fallback><![CDATA[
<?xml version="1.0"?>
<interface>
  <requires lib="gtk+" version="3.12"/>
  <menu id="menu">
    <section>
      <item>
        <attribute name="label" translatable="yes">_Words</attribute>
        <attribute name="action">win.show-words</attribute>
      </item>
    </section>
  </menu>
</interface>]]></xi:fallback></xi:include></code>
      </listing>

      <p>To connect the menuitem to the show-words setting, we use a
      #GAction corresponding to the given #GSettings key.</p>

      <listing>
        <title><file>application-window.vala</file> (extract)</title>
        <code mime="text/x-csharp"><![CDATA[
        ...
        public ApplicationWindow (Gtk.Application application) {

            ...

            var builder = new Gtk.Builder.from_resource ("/org/gtk/exampleapp/gears-menu.ui");
            var menu = builder.get_object ("menu") as GLib.MenuModel;
            gears.set_menu_model (menu);

            var action = settings.create_action ("show-words");
            add_action (action);
        }
        ...]]></code>
      </listing>
      <p>(<link href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage7/src/application-window.vala">full source</link>)</p>

      <p>What our application looks like now:</p>

      <p><media type="image" mime="image/png"
                src="images/exampleapp7.png">Application</media></p>

    </section>

    <section>

      <title>Properties</title>

      <p>Widgets and other objects have many useful properties.</p>

      <p>Here we show some ways to use them in new and flexible
      ways, by wrapping them in actions with #GPropertyAction or by
      binding them with #GBinding.</p>

      <p>To set this up, we add two labels to the header bar in our
      window template, named <code>lines_label</code> and
      <code>lines</code>, and bind them to private members in the
      class, as we've seen a couple of times by now.</p>

      <p>We add a new "Lines" menu item to the gears menu, which
      triggers the show-lines action:</p>

      <listing>
        <title><file>gears-menu.ui</file></title>
        <code mime="application/xml"><xi:include
        href="../data/gears-menu.ui"
        parse="text"><xi:fallback><![CDATA[
<?xml version="1.0"?>
<interface>
  <requires lib="gtk+" version="3.12"/>
  <menu id="menu">
    <section>
      <item>
        <attribute name="label" translatable="yes">_Words</attribute>
        <attribute name="action">win.show-words</attribute>
      </item>
      <item>
        <attribute name="label" translatable="yes">_Lines</attribute>
        <attribute name="action">win.show-lines</attribute>
      </item>
    </section>
  </menu>
</interface>]]></xi:fallback></xi:include></code>
      </listing>

      <p>To make this menu item do something, we create a property
      action for the visible property of the <code>lines</code>
      label, and add it to the actions of the window. The effect of
      this is that the visibility of the label gets toggled every
      time the action is activated.</p>

      <p>Since we want both labels to appear and disappear together,
      we bind the visible property of the <code>lines_label</code>
      widget to the same property of the <code>lines</code>
      widget.</p>

      <listing>
        <title><file>application-window.vala</file> (extract)</title>
        <code mime="text/x-csharp"><![CDATA[
        ...
        [GtkChild]
        private Gtk.Label lines_label;
        [GtkChild]
        private Gtk.Label lines;
        ...
        public ApplicationWindow (Gtk.Application application) {
            ...
            action = new GLib.PropertyAction ("show-lines", lines, "visible");
            add_action (action);

            lines.bind_property ("visible", lines_label, "visible",
                                 GLib.BindingFlags.DEFAULT);

        ...]]></code>
      </listing>
      <p>(<link href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage8/src/application-window.vala">full source</link>)</p>


      <p>We also need a function that counts the lines of the
      currently active tab, and updates the <code>lines</code>
      label. See the <link
      href="https://raw.githubusercontent.com/canek-pelaez/vala-example/stage8/src/application-window.vala">full
      source</link> if you are interested in the details.</p>

      <p>This brings our example application to this appearance:</p>

      <p><media type="image" mime="image/png"
                src="images/exampleapp8.png">Application</media></p>

    </section>

    <section>

      <title>Header bar</title>

      <p>Our application already uses a GtkHeaderBar, but so far it
      still gets a 'normal' window titlebar on top of that. This is
      a bit redundant, and we will now tell GTK+ to use the header
      bar as replacement for the titlebar. To do so, we move it
      around to be a direct child of the window, and set its type to
      be titlebar.</p>

      <listing>
        <title><file>window.ui</file></title>
        <code mime="application/xml"><xi:include
        href="../data/window.ui" parse="text"><xi:fallback><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<interface>
  <requires lib="gtk+" version="3.12"/>
  <template class="ExampleApplicationWindow" parent="GtkApplicationWindow">
    <property name="title" translatable="yes">Example Application</property>
    <property name="default-width">600</property>
    <property name="default-height">400</property>
    <child type="titlebar">
      <object class="GtkHeaderBar" id="header">
        <property name="visible">True</property>
        <property name="show-close-button">True</property>
        <child>
          <object class="GtkLabel" id="lines_label">
            <property name="visible">False</property>
            <property name="label" translatable="yes">Lines:</property>
          </object>
          <packing>
            <property name="pack-type">start</property>
          </packing>
        </child>
        <child>
          <object class="GtkLabel" id="lines">
            <property name="visible">False</property>
          </object>
          <packing>
            <property name="pack-type">start</property>
          </packing>
        </child>
        <child type="title">
          <object class="GtkStackSwitcher" id="tabs">
            <property name="visible">True</property>
            <property name="margin">6</property>
            <property name="stack">stack</property>
          </object>
        </child>
        <child>
          <object class="GtkToggleButton" id="search">
            <property name="visible">True</property>
            <property name="sensitive">False</property>
            <style>
              <class name="image-button"/>
            </style>
            <child>
              <object class="GtkImage" id="search-icon">
                <property name="visible">True</property>
                <property name="icon-name">edit-find-symbolic</property>
                <property name="icon-size">1</property>
              </object>
            </child>
          </object>
          <packing>
            <property name="pack-type">end</property>
          </packing>
        </child>
        <child>
          <object class="GtkMenuButton" id="gears">
            <property name="visible">True</property>
            <property name="direction">none</property>
            <property name="use-popover">True</property>
            <style>
              <class name="image-button"/>
            </style>
            <child>
              <object class="GtkImage" id="gears-icon">
                <property name="visible">True</property>
                <property name="icon-name">emblem-system-symbolic</property>
                <property name="icon-size">1</property>
              </object>
            </child>
          </object>
          <packing>
            <property name="pack-type">end</property>
          </packing>
        </child>
      </object>
    </child>
    <child>
      <object class="GtkBox" id="content_box">
        <property name="visible">True</property>
        <property name="orientation">vertical</property>
        <child>
          <object class="GtkSearchBar" id="searchbar">
            <property name="visible">True</property>
            <child>
              <object class="GtkSearchEntry" id="searchentry">
                <signal name="search-changed" handler="search_text_changed"/>
                <property name="visible">True</property>
              </object>
            </child>
          </object>
        </child>
        <child>
          <object class="GtkBox" id="hbox">
            <property name="visible">True</property>
            <child>
              <object class="GtkRevealer" id="sidebar">
                <property name="visible">True</property>
                <property name="transition-type">slide-right</property>
                <child>
                  <object class="GtkScrolledWindow" id="sidebar-sw">
                    <property name="visible">True</property>
                    <property name="hscrollbar-policy">never</property>
                    <property name="vscrollbar-policy">automatic</property>
                    <child>
                      <object class="GtkListBox" id="words">
                        <property name="visible">True</property>
                        <property name="selection-mode">none</property>
                      </object>
                    </child>
                  </object>
                </child>
              </object>
            </child>
            <child>
              <object class="GtkStack" id="stack">
                <signal name="notify::visible-child" handler="visible_child_changed"/>
                <property name="visible">True</property>
              </object>
            </child>
          </object>
        </child>
      </object>
    </child>
  </template>
</interface>
]]></xi:fallback></xi:include></code>
      </listing>

      <p>A small extra bonus of using a header bar is that we get a
      fallback application menu for free. Here is how the
      application now looks, if this fallback is used.</p>

      <p><media type="image" mime="image/png"
                src="images/exampleapp9.png">Application</media></p>

      <p>If we set up the window icon for our window, the menu
      button will use that instead of the generic placeholder icon
      you see here.</p>

    </section>

</page>
